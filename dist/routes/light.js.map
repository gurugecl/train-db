{"version":3,"sources":["../../routes/light.js"],"names":["require","Router","PgConnection","dbConnectionInfo","pg","router","cors","use","get","request","response","next","getAll","result","json","console","error","post","body","level","amount","log","insert","send","delete","id","params","deleteById","deleteAll","module","exports"],"mappings":";;;;eAAmBA,QAAQ,SAAR,C;IAAXC,M,YAAAA,M;;AACR,IAAMC,eAAeF,QAAQ,iBAAR,CAArB;AACA,IAAMG,mBAAmBH,QAAQ,6BAAR,CAAzB;AACA,IAAMI,KAAK,IAAIF,YAAJ,CAAiBC,gBAAjB,CAAX;AACA,IAAME,SAASJ,QAAf;AACA,IAAMK,OAAON,QAAQ,MAAR,CAAb;;AAEAK,OAAOE,GAAP,CAAWD,MAAX;;AAEAD,OAAOG,GAAP,CAAW,GAAX;AAAA,yDAAgB,iBAAOC,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEaP,GAAGQ,MAAH,CAAU,OAAV,CAFb;;AAAA;AAEFC,8BAFE;;AAGRH,iCAASI,IAAT,CAAcD,MAAd;AAHQ;AAAA;;AAAA;AAAA;AAAA;;AAKRE,gCAAQC,KAAR;AACAL;;AANQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA;;AAUA;AACAN,OAAOY,IAAP,CAAY,GAAZ;AAAA,0DAAiB,kBAAOR,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wCACaF,QAAQS,IADrB,EACLC,KADK,iBACLA,KADK,EACEC,MADF,iBACEA,MADF;;AAEbL,gCAAQM,GAAR,CAAY,cAAZ,EAA4BZ,QAAQS,IAApC;AAFa;AAAA;AAAA,+BAIHd,GAAGkB,MAAH,CAAU,OAAV,EAAmB,EAAEH,YAAF,EAASC,cAAT,EAAnB,CAJG;;AAAA;AAKTV,iCAASa,IAAT;AALS;AAAA;;AAAA;AAAA;AAAA;;AAOTR,gCAAQC,KAAR;AACAL;;AARS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;;AAYAN,OAAOmB,MAAP,CAAc,MAAd;AAAA,0DAAsB,kBAAOf,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACVc,0BADU,GACHhB,QAAQiB,MADL,CACVD,EADU;AAAA;AAAA;AAAA,+BAGRrB,GAAGuB,UAAH,CAAc,OAAd,EAAuBF,EAAvB,CAHQ;;AAAA;AAIdf,iCAASa,IAAT;AAJc;AAAA;;AAAA;AAAA;AAAA;;AAMdR,gCAAQC,KAAR;AACAL;;AAPc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;;AAWAN,OAAOmB,MAAP,CAAc,GAAd;AAAA,0DAAmB,kBAAOf,OAAP,EAAgBC,QAAhB,EAA0BC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAELP,GAAGwB,SAAH,CAAa,OAAb,CAFK;;AAAA;AAGXlB,iCAASa,IAAT;AAHW;AAAA;;AAAA;AAAA;AAAA;;AAKXR,gCAAQC,KAAR;AACAL;;AANW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA;;AAUAkB,OAAOC,OAAP,GAAiBzB,MAAjB","file":"light.js","sourcesContent":["const { Router } = require('express');\r\nconst PgConnection = require('postgresql-easy');\r\nconst dbConnectionInfo = require('../secrets/db_configuration');\r\nconst pg = new PgConnection(dbConnectionInfo);\r\nconst router = Router();\r\nconst cors = require('cors');\r\n\r\nrouter.use(cors());\r\n\r\nrouter.get('/', async (request, response, next) => {\r\n    try {\r\n        const result = await pg.getAll('light');\r\n        response.json(result);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\n//not added yet\r\nrouter.post('/', async (request, response, next) => {\r\n    const { level, amount } = request.body;\r\n    console.log(\"request.body\", request.body);\r\n    try {\r\n        await pg.insert('light', { level, amount });\r\n        response.send();\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.delete('/:id', async (request, response, next) => {\r\n    const { id } = request.params;\r\n    try {\r\n        await pg.deleteById('light', id);\r\n        response.send();\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.delete('/', async (request, response, next) => {\r\n    try {\r\n        await pg.deleteAll('light');\r\n        response.send();\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nmodule.exports = router;"]}