{"version":3,"sources":["../../routes/profiles.js"],"names":["require","Router","pool","router","get","request","response","next","query","err","res","json","rows","sql","rowCount","console","error","id","params","post","body","name","environment","redirect","put","keys","fields","forEach","key","push","field","index","length","delete","module","exports"],"mappings":"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","file":"profiles.js","sourcesContent":["const { Router } = require('express');\r\nconst pool = require('../db');\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/', (request, response, next) => {\r\n  pool.query('SELECT * FROM profiles ORDER BY id ASC', (err, res) => {\r\n    if (err) return next(err);\r\n\r\n    response.json(res.rows);\r\n  });\r\n});\r\n\r\nrouter.get('/', async (request, response, next) => {\r\n    const sql = `\r\n\t\tSELECT *\r\n\t\tFROM profiles\r\n\t\tORDER BY id ASC`;\r\n    try {\r\n        const {rowCount, rows} = await pool.query(sql);\r\n        response.json(rowCount ? rows : []);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.get('/:id', (request, response, next) => {\r\n  const { id } = request.params;\r\n\r\n  pool.query('SELECT * FROM profiles WHERE id = $1', [id], (err, res) => {\r\n    if (err) return next(err);\r\n\r\n    response.json(res.rows);\r\n  });\r\n});\r\n\r\nrouter.get('/', async (request, response, next) => {\r\n    const sql = `\r\n\t\tSELECT * \r\n\t\tFROM profiles \r\n\t\tWHERE id = $1, [id]`;\r\n    try {\r\n        const {rowCount, rows} = await pool.query(sql);\r\n        response.json(rowCount ? rows : []);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.post('/', (request, response, next) => {\r\n  const { name, environment } = request.body;\r\n\r\n  pool.query(\r\n    'INSERT INTO profiles(name, environment) VALUES($1, $2)',\r\n    [name, environment],\r\n    (err, res) => {\r\n      if (err) return next(err);\r\n\r\n      response.redirect('/profiles');\r\n    },\r\n  );\r\n});\r\n\r\nrouter.put('/:id', (request, response, next) => {\r\n  const { id } = request.params;\r\n  const keys = ['name', 'environment'];\r\n  const fields = [];\r\n\r\n  keys.forEach(key => {\r\n    if (request.body[key]) fields.push(key);\r\n  });\r\n\r\n  fields.forEach((field, index) => {\r\n    pool.query(\r\n      `UPDATE profiles SET ${field}=($1) WHERE id=($2)`,\r\n      [request.body[field], id],\r\n      (err, res) => {\r\n        if (err) return next(err);\r\n\r\n        if (index === fields.length - 1) response.redirect('/profiles');\r\n      },\r\n    );\r\n  });\r\n});\r\n\r\nrouter.delete('/:id', (request, response, next) => {\r\n  const { id } = request.params;\r\n\r\n  pool.query('DELETE FROM profiles WHERE id=($1)', [id], (err, res) => {\r\n    if (err) return next(err);\r\n\r\n    response.redirect('/profiles');\r\n  });\r\n});\r\n\r\nmodule.exports = router;\r\n"]}