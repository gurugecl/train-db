{"version":3,"sources":["../../routes/profiles.js"],"names":["require","Router","PgConnection","dbConnectionInfo","pg","router","get","request","response","next","getAll","result","json","console","error","id","params","getById","log","rows","post","body","name","environment","insert","redirect","e","put","keys","fields","forEach","key","push","field","index","updateById","length","delete","deleteById","deleteAll","module","exports"],"mappings":"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","file":"profiles.js","sourcesContent":["const { Router } = require('express');\r\nconst PgConnection = require('postgresql-easy');\r\nconst dbConnectionInfo = require('../secrets/db_configuration');\r\nconst pg = new PgConnection(dbConnectionInfo);\r\nconst router = Router();\r\n\r\nrouter.get('/', async (request, response, next) => {\r\n    try {\r\n        const result = await pg.getAll('profiles');\r\n        response.json(result);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.get('/:id', async (request, response, next) => {\r\n    const { id } = request.params;\r\n    try {\r\n        const result = await pg.getById('profiles', id);\r\n        console.log(result.rows);\r\n        response.json(result);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.post('/', async (request, response, next) => {\r\n    const { name, environment } = request.body;\r\n    try {\r\n        const result = pg.insert('profiles', {name , environment});\r\n        response.redirect('/profiles');\r\n        console.log(result.rows[0]);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.put('/:id', async (request, response, next) => {\r\n    const { id } = request.params;\r\n    const keys = ['name', 'environment'];\r\n    const fields = [];\r\n\r\n    keys.forEach(key => {\r\n        if (request.body[key]) fields.push(key);\r\n    });\r\n\r\n    fields.forEach(async(field, index) => {\r\n    try {\r\n        const result = pg.updateById(\r\n            'profiles', id, {name: keys.name, environment: keys.environment});\r\n            if (index === fields.length - 1) response.redirect('/profiles');\r\n            console.log(result.rows[0]);\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n})\r\n});\r\n\r\nrouter.delete('/:id', async (request, response, next) => {\r\n    const { id } = request.params;\r\n    try {\r\n        await pg.deleteById('profiles', id);\r\n        response.redirect('/profiles');\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.delete('/', async (request, response, next) => {\r\n    try {\r\n        await pg.deleteAll('profiles');\r\n        response.redirect('/profiles');\r\n    } catch (e) {\r\n        console.error(e);\r\n        next(e);\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router;"]}