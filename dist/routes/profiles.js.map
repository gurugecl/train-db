{"version":3,"sources":["../../routes/profiles.js"],"names":["require","Router","PgConnection","dbConnectionInfo","pg","router","cors","use","get","request","response","next","getAll","result","json","console","error","id","params","getById","post","body","name","environment","log","insert","send","put","keys","fields","forEach","key","push","field","index","updateById","length","delete","deleteById","deleteAll","module","exports"],"mappings":"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","file":"profiles.js","sourcesContent":["const { Router } = require('express');\r\nconst PgConnection = require('postgresql-easy');\r\nconst dbConnectionInfo = require('../secrets/db_configuration');\r\nconst pg = new PgConnection(dbConnectionInfo);\r\nconst router = Router();\r\nconst cors = require('cors');\r\n\r\nrouter.use(cors());\r\n\r\nrouter.get('/', async (request, response, next) => {\r\n  try {\r\n    const result = await pg.getAll('profiles');\r\n    response.json(result);\r\n  } catch (e) {\r\n    console.error(e);\r\n    next(e);\r\n  }\r\n});\r\n\r\n//not used\r\nrouter.get('/:id', async (request, response, next) => {\r\n  const { id } = request.params;\r\n  try {\r\n    const result = await pg.getById('profiles', id);\r\n    response.json(result);\r\n  } catch (e) {\r\n    console.error(e);\r\n    next(e);\r\n  }\r\n});\r\n\r\nrouter.post('/', async (request, response, next) => {\r\n  const { name, environment } = request.body;\r\n   console.log(\"request.body\", request.body);\r\n  try {\r\n    await pg.insert('profiles', { name, environment });\r\n    response.send();\r\n  } catch (e) {\r\n    console.error(e);\r\n    next(e);\r\n  }\r\n});\r\n\r\n//not used\r\nrouter.put('/:id', async (request, response, next) => {\r\n  const { id } = request.params;\r\n  const keys = ['name', 'environment'];\r\n  const fields = [];\r\n\r\n  keys.forEach(key => {\r\n    if (request.body[key]) fields.push(key);\r\n  });\r\n\r\n  fields.forEach(async (field, index) => {\r\n    try {\r\n      await pg.updateById('profiles', id, {\r\n        name: keys.name,\r\n        environment: keys.environment,\r\n      });\r\n      if (index === fields.length - 1) response.send();\r\n    } catch (e) {\r\n      console.error(e);\r\n      next(e);\r\n    }\r\n  });\r\n});\r\n\r\nrouter.delete('/:id', async (request, response, next) => {\r\n  const { id } = request.params;\r\n    console.log(\"deleteById delete id\", id);\r\n  try {\r\n    await pg.deleteById('profiles', id);\r\n      response.send();\r\n  } catch (e) {\r\n    console.error(e);\r\n    next(e);\r\n  }\r\n});\r\n\r\nrouter.delete('/', async (request, response, next) => {\r\n  try {\r\n    // const sql = 'TRUNCATE profiles RESTART IDENTITY';\r\n    await pg.deleteAll('profiles');\r\n    // await pg.query(sql);\r\n    console.log(\"deleteAll\");\r\n      response.send();\r\n  } catch (e) {\r\n    console.error(e);\r\n    next(e);\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"]}