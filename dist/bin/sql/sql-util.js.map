{"version":3,"sources":["../../../bin/sql/sql-util.js"],"names":["SqlUtil","pool","debug","msg","console","log","join","tableName","sql","end","obj","keys","Object","values","map","key","cols","placeholders","v","index","id","sets","value","module","exports"],"mappings":";;;;;;IAAMA,O;AAEF,qBAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;;AACrB,aAAKD,IAAL,GAAYA,IAAZ;AACA,aAAKC,KAAL,GAAaA,KAAb;AACH;;;;8BAEW;AAAA,8CAALC,GAAK;AAALA,mBAAK;AAAA;;AACR,gBAAI,KAAKD,KAAT,EAAgBE,QAAQC,GAAR,CAAY,iBAAZ,EAA+BF,IAAIG,IAAJ,CAAS,GAAT,CAA/B;AACnB;;AAED;;;;;;kCAGUC,S,EAAW;AACjB,gBAAMC,uBAAqBD,SAA3B;AACA,iBAAKF,GAAL,CAAS,kBAAT,EAA6BG,GAA7B;AACA,mBAAOA,GAAP;AACH;;AAED;;;;;;;mCAIWD,S,CAAU,Q,EAAU;AAC3B,gBAAMC,uBAAqBD,SAArB,iBAAN;AACA,iBAAKF,GAAL,CAAS,mBAAT,EAA8BG,GAA9B;AACA,mBAAOA,GAAP;AACH;;AAED;;;;;;qCAGa;AACT,iBAAKH,GAAL,CAAS,eAAT;AACA,gBAAI,KAAKJ,IAAT,EAAe;AACX,qBAAKA,IAAL,CAAUQ,GAAV;AACA,qBAAKR,IAAL,GAAY,IAAZ;AACH;AACJ;;AAED;;;;;;+BAGOM,S,EAAW;AACd,gBAAMC,yBAAuBD,SAA7B;AACA,iBAAKF,GAAL,CAAS,eAAT,EAA0BG,GAA1B;AACA,mBAAOA,GAAP;AACH;;AAED;;;;;;;gCAIQD,S,CAAU,Q,EAAU;AACxB,gBAAMC,yBAAuBD,SAAvB,iBAAN;AACA,iBAAKF,GAAL,CAAS,gBAAT,EAA2BG,GAA3B;AACA,mBAAOA,GAAP;AACH;;AAED;;;;;;;;+BAKOD,S,EAAWG,G,EAAK;AACnB,gBAAMC,OAAOC,OAAOD,IAAP,CAAYD,GAAZ,CAAb;AACA,gBAAMG,SAASF,KAAKG,GAAL,CAAS;AAAA,uBAAOJ,IAAIK,GAAJ,CAAP;AAAA,aAAT,CAAf;AACA,gBAAMC,OAAOL,KAAKL,IAAL,CAAU,IAAV,CAAb;AACA,gBAAMW,eAAeJ,OAAOC,GAAP,CAAW,UAACI,CAAD,EAAIC,KAAJ;AAAA,uBAAc,OAAOA,QAAQ,CAAf,CAAd;AAAA,aAAX,EAA4Cb,IAA5C,CAAiD,IAAjD,CAArB;AACA,gBAAME,uBACaD,SADb,UAC2BS,IAD3B,iBAC2CC,YAD3C,mBAAN;AAEA,iBAAKZ,GAAL,CAAS,eAAT,EAA0BG,GAA1B;AACA,mBAAOA,GAAP;AACH;;AAED;;;;;;;mCAIWD,S,EAAWa,E,EAAIV,G,EAAK;AAC3B,gBAAMW,OAAOT,OAAOD,IAAP,CAAYD,GAAZ,EAAiBI,GAAjB,CAAqB,eAAO;AACrC,oBAAMI,IAAIR,IAAIK,GAAJ,CAAV;AACA,oBAAMO,QAAQ,OAAOJ,CAAP,KAAa,QAAb,UAA4BA,CAA5B,UAAmCA,CAAjD;AACA,uBAAUH,GAAV,SAAiBO,KAAjB;AACH,aAJY,CAAb;AAKA,gBAAMd,kBAAgBD,SAAhB,aAAiCc,IAAjC,iBAAN;AACA,iBAAKhB,GAAL,CAAS,eAAT,EAA0BG,GAA1B;AACA,mBAAOA,GAAP;AACH;;;;;;AAGLe,OAAOC,OAAP,GAAiBxB,OAAjB","file":"sql-util.js","sourcesContent":["class SqlUtil {\r\n\r\n    constructor(pool, debug) {\r\n        this.pool = pool;\r\n        this.debug = debug;\r\n    }\r\n\r\n    log(...msg) {\r\n        if (this.debug) console.log('postgresql-easy', msg.join(' '));\r\n    }\r\n\r\n    /**\r\n     * Deletes all records from a given table.\r\n     */\r\n    deleteAll(tableName) {\r\n        const sql = `delete from ${tableName}`;\r\n        this.log('deleteAll: sql =', sql);\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Deletes a record from a given table by id.\r\n     * This requires the table to have a column named \"id\".\r\n     */\r\n    deleteById(tableName /*, id*/) {\r\n        const sql = `delete from ${tableName} where id=$1`;\r\n        this.log('deleteById: sql =', sql);\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Disconnects from the database.\r\n     */\r\n    disconnect() {\r\n        this.log('disconnecting');\r\n        if (this.pool) {\r\n            this.pool.end();\r\n            this.pool = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all records from a given table.\r\n     */\r\n    getAll(tableName) {\r\n        const sql = `select * from ${tableName}`;\r\n        this.log('getAll: sql =', sql);\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Gets a record from a given table by id.\r\n     * This requires the table to have a column named \"id\".\r\n     */\r\n    getById(tableName /*, id*/) {\r\n        const sql = `select * from ${tableName} where id=$1`;\r\n        this.log('getById: sql =', sql);\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Inserts a record into a given table.\r\n     * The keys of obj are column names\r\n     * and their values are the values to insert.\r\n     */\r\n    insert(tableName, obj) {\r\n        const keys = Object.keys(obj);\r\n        const values = keys.map(key => obj[key]);\r\n        const cols = keys.join(', ');\r\n        const placeholders = values.map((v, index) => '$' + (index + 1)).join(', ');\r\n        const sql =\r\n            `insert into ${tableName} (${cols}) values(${placeholders}) returning id`;\r\n        this.log('insert: sql =', sql);\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Updates a record in a given table by id.\r\n     * This requires the table to have a column named \"id\".\r\n     */\r\n    updateById(tableName, id, obj) {\r\n        const sets = Object.keys(obj).map(key => {\r\n            const v = obj[key];\r\n            const value = typeof v === 'string' ? `'${v}'` : v;\r\n            return `${key}=${value}`;\r\n        });\r\n        const sql = `update ${tableName} set ${sets} where id=$1`;\r\n        this.log('update: sql =', sql);\r\n        return sql;\r\n    }\r\n}\r\n\r\nmodule.exports = SqlUtil;"]}